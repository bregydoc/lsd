// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/lsd.proto

package lsd

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NotificationPayload struct {
	To                   []string      `protobuf:"bytes,1,rep,name=to,proto3" json:"to,omitempty"`
	Notification         *Notification `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NotificationPayload) Reset()         { *m = NotificationPayload{} }
func (m *NotificationPayload) String() string { return proto.CompactTextString(m) }
func (*NotificationPayload) ProtoMessage()    {}
func (*NotificationPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca3cecd9ea5e5eb, []int{0}
}

func (m *NotificationPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationPayload.Unmarshal(m, b)
}
func (m *NotificationPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationPayload.Marshal(b, m, deterministic)
}
func (m *NotificationPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationPayload.Merge(m, src)
}
func (m *NotificationPayload) XXX_Size() int {
	return xxx_messageInfo_NotificationPayload.Size(m)
}
func (m *NotificationPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationPayload.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationPayload proto.InternalMessageInfo

func (m *NotificationPayload) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NotificationPayload) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type NotificationResult struct {
	Ok                   bool              `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Notifications        map[string]string `protobuf:"bytes,2,rep,name=notifications,proto3" json:"notifications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NotificationResult) Reset()         { *m = NotificationResult{} }
func (m *NotificationResult) String() string { return proto.CompactTextString(m) }
func (*NotificationResult) ProtoMessage()    {}
func (*NotificationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca3cecd9ea5e5eb, []int{1}
}

func (m *NotificationResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationResult.Unmarshal(m, b)
}
func (m *NotificationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationResult.Marshal(b, m, deterministic)
}
func (m *NotificationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationResult.Merge(m, src)
}
func (m *NotificationResult) XXX_Size() int {
	return xxx_messageInfo_NotificationResult.Size(m)
}
func (m *NotificationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationResult.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationResult proto.InternalMessageInfo

func (m *NotificationResult) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *NotificationResult) GetNotifications() map[string]string {
	if m != nil {
		return m.Notifications
	}
	return nil
}

type Notification struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Body                 string   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Options              []string `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca3cecd9ea5e5eb, []int{2}
}

func (m *Notification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notification.Unmarshal(m, b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return xxx_messageInfo_Notification.Size(m)
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notification) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Notification) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

type NewKeyPairPayload struct {
	UserID               string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewKeyPairPayload) Reset()         { *m = NewKeyPairPayload{} }
func (m *NewKeyPairPayload) String() string { return proto.CompactTextString(m) }
func (*NewKeyPairPayload) ProtoMessage()    {}
func (*NewKeyPairPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca3cecd9ea5e5eb, []int{3}
}

func (m *NewKeyPairPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewKeyPairPayload.Unmarshal(m, b)
}
func (m *NewKeyPairPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewKeyPairPayload.Marshal(b, m, deterministic)
}
func (m *NewKeyPairPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewKeyPairPayload.Merge(m, src)
}
func (m *NewKeyPairPayload) XXX_Size() int {
	return xxx_messageInfo_NewKeyPairPayload.Size(m)
}
func (m *NewKeyPairPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_NewKeyPairPayload.DiscardUnknown(m)
}

var xxx_messageInfo_NewKeyPairPayload proto.InternalMessageInfo

func (m *NewKeyPairPayload) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type KeyPairPayload struct {
	UserID               string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyPairPayload) Reset()         { *m = KeyPairPayload{} }
func (m *KeyPairPayload) String() string { return proto.CompactTextString(m) }
func (*KeyPairPayload) ProtoMessage()    {}
func (*KeyPairPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca3cecd9ea5e5eb, []int{4}
}

func (m *KeyPairPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyPairPayload.Unmarshal(m, b)
}
func (m *KeyPairPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyPairPayload.Marshal(b, m, deterministic)
}
func (m *KeyPairPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPairPayload.Merge(m, src)
}
func (m *KeyPairPayload) XXX_Size() int {
	return xxx_messageInfo_KeyPairPayload.Size(m)
}
func (m *KeyPairPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPairPayload.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPairPayload proto.InternalMessageInfo

func (m *KeyPairPayload) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type KeyPairResult struct {
	UserID               string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyPairResult) Reset()         { *m = KeyPairResult{} }
func (m *KeyPairResult) String() string { return proto.CompactTextString(m) }
func (*KeyPairResult) ProtoMessage()    {}
func (*KeyPairResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca3cecd9ea5e5eb, []int{5}
}

func (m *KeyPairResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyPairResult.Unmarshal(m, b)
}
func (m *KeyPairResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyPairResult.Marshal(b, m, deterministic)
}
func (m *KeyPairResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPairResult.Merge(m, src)
}
func (m *KeyPairResult) XXX_Size() int {
	return xxx_messageInfo_KeyPairResult.Size(m)
}
func (m *KeyPairResult) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPairResult.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPairResult proto.InternalMessageInfo

func (m *KeyPairResult) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *KeyPairResult) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func init() {
	proto.RegisterType((*NotificationPayload)(nil), "lsd.NotificationPayload")
	proto.RegisterType((*NotificationResult)(nil), "lsd.NotificationResult")
	proto.RegisterMapType((map[string]string)(nil), "lsd.NotificationResult.NotificationsEntry")
	proto.RegisterType((*Notification)(nil), "lsd.Notification")
	proto.RegisterType((*NewKeyPairPayload)(nil), "lsd.NewKeyPairPayload")
	proto.RegisterType((*KeyPairPayload)(nil), "lsd.KeyPairPayload")
	proto.RegisterType((*KeyPairResult)(nil), "lsd.KeyPairResult")
}

func init() { proto.RegisterFile("proto/lsd.proto", fileDescriptor_9ca3cecd9ea5e5eb) }

var fileDescriptor_9ca3cecd9ea5e5eb = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x49, 0xa2, 0xd5, 0x4c, 0xff, 0xd8, 0x4e, 0xa5, 0x86, 0xe2, 0x21, 0xe4, 0x14, 0x14,
	0x2a, 0x54, 0x0a, 0xe2, 0xa9, 0x87, 0x96, 0x22, 0x95, 0x52, 0xb6, 0x57, 0x2f, 0x69, 0xb3, 0x42,
	0xe8, 0x92, 0x2d, 0xc9, 0x46, 0xc9, 0x9b, 0xf9, 0x02, 0xbe, 0x97, 0x64, 0xb3, 0xa5, 0x59, 0x4b,
	0xc5, 0xdb, 0xcc, 0xe4, 0xf7, 0x7d, 0xbb, 0xdf, 0x6c, 0xe0, 0x6a, 0x97, 0x70, 0xc1, 0x1f, 0x58,
	0x1a, 0x0e, 0x64, 0x85, 0x16, 0x4b, 0x43, 0xef, 0x0d, 0xba, 0x0b, 0x2e, 0xa2, 0xf7, 0x68, 0x13,
	0x88, 0x88, 0xc7, 0xcb, 0x20, 0x67, 0x3c, 0x08, 0xb1, 0x05, 0xa6, 0xe0, 0x8e, 0xe1, 0x5a, 0xbe,
	0x4d, 0x4c, 0xc1, 0x71, 0x04, 0x8d, 0xb8, 0x82, 0x39, 0xa6, 0x6b, 0xf8, 0xf5, 0x61, 0x67, 0x50,
	0xb8, 0x55, 0xf5, 0x44, 0xc3, 0xbc, 0x2f, 0x03, 0x50, 0xfb, 0x4c, 0xd3, 0x8c, 0x89, 0xc2, 0x9d,
	0x6f, 0x1d, 0xc3, 0x35, 0xfc, 0x4b, 0x62, 0xf2, 0x2d, 0x2e, 0xa1, 0x59, 0x95, 0xa5, 0x8e, 0xe9,
	0x5a, 0x7e, 0x7d, 0x78, 0x77, 0x6c, 0x2f, 0xf5, 0xda, 0x28, 0x9d, 0xc6, 0x22, 0xc9, 0x89, 0x6e,
	0xd0, 0x1f, 0xeb, 0xe7, 0x96, 0x10, 0xb6, 0xc1, 0xda, 0xd2, 0x5c, 0x1e, 0x6c, 0x93, 0xa2, 0xc4,
	0x6b, 0x38, 0xff, 0x08, 0x58, 0x46, 0x65, 0x20, 0x9b, 0x94, 0xcd, 0xb3, 0xf9, 0x64, 0x78, 0x04,
	0x1a, 0x55, 0x87, 0x82, 0x14, 0x91, 0x60, 0x54, 0xa9, 0xcb, 0x06, 0x11, 0xce, 0xd6, 0x3c, 0xcc,
	0x95, 0x5c, 0xd6, 0xe8, 0xc0, 0x05, 0xdf, 0x95, 0x39, 0x2c, 0xb9, 0xc0, 0x7d, 0xeb, 0xdd, 0x43,
	0x67, 0x41, 0x3f, 0xe7, 0x34, 0x5f, 0x06, 0x51, 0xb2, 0x5f, 0x75, 0x0f, 0x6a, 0x59, 0x4a, 0x93,
	0x97, 0x89, 0x72, 0x56, 0x9d, 0xe7, 0x43, 0xeb, 0x9f, 0xe4, 0x14, 0x9a, 0x8a, 0x54, 0xfb, 0x3d,
	0x01, 0xe2, 0x2d, 0xd8, 0xbb, 0x6c, 0xcd, 0xa2, 0xcd, 0x9c, 0x96, 0x57, 0x6e, 0x90, 0xc3, 0x60,
	0xf8, 0x6d, 0x80, 0xf5, 0xba, 0x9a, 0xe0, 0x14, 0xda, 0x2b, 0x1a, 0x87, 0x5a, 0x7a, 0xe7, 0xe8,
	0x29, 0xd4, 0xa5, 0xfa, 0x37, 0x27, 0x1e, 0x09, 0xc7, 0x80, 0x33, 0x1a, 0xd3, 0x24, 0x10, 0xf4,
	0x10, 0x1a, 0x7b, 0x25, 0xfe, 0x7b, 0x0b, 0x7d, 0x94, 0x73, 0x3d, 0xc6, 0x08, 0x60, 0x46, 0xc5,
	0x5e, 0xd9, 0xad, 0x12, 0x7f, 0xc8, 0xd6, 0x35, 0xf9, 0x7b, 0x3f, 0xfe, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xf4, 0xa0, 0x14, 0x9f, 0xf1, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LSDClient is the client API for LSD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LSDClient interface {
	SendNotification(ctx context.Context, in *NotificationPayload, opts ...grpc.CallOption) (*NotificationResult, error)
	GenerateNewKeyPair(ctx context.Context, in *NewKeyPairPayload, opts ...grpc.CallOption) (*KeyPairResult, error)
	GetKeyPair(ctx context.Context, in *KeyPairPayload, opts ...grpc.CallOption) (*KeyPairResult, error)
}

type lSDClient struct {
	cc *grpc.ClientConn
}

func NewLSDClient(cc *grpc.ClientConn) LSDClient {
	return &lSDClient{cc}
}

func (c *lSDClient) SendNotification(ctx context.Context, in *NotificationPayload, opts ...grpc.CallOption) (*NotificationResult, error) {
	out := new(NotificationResult)
	err := c.cc.Invoke(ctx, "/lsd.LSD/SendNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSDClient) GenerateNewKeyPair(ctx context.Context, in *NewKeyPairPayload, opts ...grpc.CallOption) (*KeyPairResult, error) {
	out := new(KeyPairResult)
	err := c.cc.Invoke(ctx, "/lsd.LSD/GenerateNewKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSDClient) GetKeyPair(ctx context.Context, in *KeyPairPayload, opts ...grpc.CallOption) (*KeyPairResult, error) {
	out := new(KeyPairResult)
	err := c.cc.Invoke(ctx, "/lsd.LSD/GetKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LSDServer is the server API for LSD service.
type LSDServer interface {
	SendNotification(context.Context, *NotificationPayload) (*NotificationResult, error)
	GenerateNewKeyPair(context.Context, *NewKeyPairPayload) (*KeyPairResult, error)
	GetKeyPair(context.Context, *KeyPairPayload) (*KeyPairResult, error)
}

// UnimplementedLSDServer can be embedded to have forward compatible implementations.
type UnimplementedLSDServer struct {
}

func (*UnimplementedLSDServer) SendNotification(ctx context.Context, req *NotificationPayload) (*NotificationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (*UnimplementedLSDServer) GenerateNewKeyPair(ctx context.Context, req *NewKeyPairPayload) (*KeyPairResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNewKeyPair not implemented")
}
func (*UnimplementedLSDServer) GetKeyPair(ctx context.Context, req *KeyPairPayload) (*KeyPairResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyPair not implemented")
}

func RegisterLSDServer(s *grpc.Server, srv LSDServer) {
	s.RegisterService(&_LSD_serviceDesc, srv)
}

func _LSD_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSDServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lsd.LSD/SendNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSDServer).SendNotification(ctx, req.(*NotificationPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSD_GenerateNewKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewKeyPairPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSDServer).GenerateNewKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lsd.LSD/GenerateNewKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSDServer).GenerateNewKeyPair(ctx, req.(*NewKeyPairPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSD_GetKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPairPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSDServer).GetKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lsd.LSD/GetKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSDServer).GetKeyPair(ctx, req.(*KeyPairPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _LSD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lsd.LSD",
	HandlerType: (*LSDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _LSD_SendNotification_Handler,
		},
		{
			MethodName: "GenerateNewKeyPair",
			Handler:    _LSD_GenerateNewKeyPair_Handler,
		},
		{
			MethodName: "GetKeyPair",
			Handler:    _LSD_GetKeyPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lsd.proto",
}
